""" Реализовать программу работы с органическими клетками, состоящими из ячеек.
Создать класс Клетка. В его конструкторе инициализировать параметр,
соответствующий количеству ячеек клетки (целое число). В классе должны быть
реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение,
уменьшение, умножение и целочисленное (с округлением до целого) деление клеток,
соответственно.
-   Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
    равняться сумме ячеек исходных двух клеток.
-   Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если
    разность количества ячеек двух клеток больше нуля, иначе выводить
    соответствующее сообщение.
-   Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки
    определяется как произведение количества ячеек этих двух клеток.
-   Деление. Создаётся общая клетка из двух. Число ячеек общей клетки
    определяется как целочисленное деление количества ячеек этих двух клеток.
В классе реализовать метод make_order(), принимающий экземпляр класса и
количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество
ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не
хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернёт строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернёт строку: *****\n*****\n*****."""


class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __add__(self, other):
        return f'Новая клетка имеет {self.quantity + other.quantity} ячеек'

    def __sub__(self, other):
        sub = self.quantity - other.quantity
        return f'В Клетке осталось: {sub} ячеек' if sub > 0 \
            else 'Клетки более не имеет ячеек'

    def __mul__(self, other):
        return f"Новая клетка имеет {self.quantity * other.quantity} ячеек"

    def __truediv__(self, other):
        try:
            self.quantity // other.quantity
        except ZeroDivisionError:
            print("Ошибка! Деление на 0")
        else:
            pass
        return f"Новая клетка имеет {self.quantity // other.quantity} клеток"

    def make_order(self, line):
        result = ''
        for i in range(int(self.quantity / line)):
            result += '*' * line + '\n'
        result += '*' * (self.quantity % line) + '\n'
        return result


cell = Cell(24)
cell_2 = Cell(4)

print(cell + cell_2)
print(cell - cell_2)
print(cell * cell_2)
print(cell / cell_2)
print(cell.make_order(9))
