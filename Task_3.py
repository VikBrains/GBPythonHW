"""3 Создайте собственный класс-исключение, который должен проверять содержимое
списка на наличие только чисел. Проверить работу исключения на реальном примере
Запрашивать у пользователя данные и заполнять список необходимо только числами.
Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
пока пользователь сам не остановит работу скрипта, введя команду «stop».
При этом скрипт завершается, сформированный список с числами выводится на экран
Подсказка: для этого задания примем, что пользователь может вводить
только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать
проверку типа элемента. Вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число)
и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться."""


class DigChecker(Exception):
    def __init__(self, txt):
        self.txt = txt


def digit_filter(string):
    if string.isdigit():
        return string
    else:
        try:
            float(string)
            return string
        except ValueError:
            raise DigChecker(f'{string} - это не число')


input_txt = ''
counter = 1
numbers_list = []
print("Введите число, для окончания введите 'stop'")
while input_txt != 'stop':
    try:
        input_txt = input(f"{counter}: ")
        numbers_list.append(digit_filter(input_txt))
        counter += 1
    except DigChecker as err0r:
        if input_txt != 'stop':
            print(err0r.txt)

print(f"Result list:\n{numbers_list}")
